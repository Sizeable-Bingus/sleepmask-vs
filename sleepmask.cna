# ===========================================================================
#                                  Utils
# ===========================================================================

# ----------------------------------------------
# Print information to the Script Console
# $1 = message
# ----------------------------------------------
sub print_info {
   println(formatDate("[HH:mm:ss] ") . "\cE[SLEEPMASK-VS]\o " . $1);
}

# ===========================================================================
#                        Sleep Mask Menu Chooser
# ===========================================================================
global('$global_sleep_mask');
$global_sleep_mask = "default-sleepmask";

popup sleep_mask_menu
{
    item "Sleepmask selector"
    {
        local('$dialog');

        $dialog = dialog("Sleepmask selector", %(slp => $global_sleep_mask), { $global_sleep_mask = $3["slp"]; });

        dialog_description($dialog, "Choose which sleepmask to use for subsequent Beacon payloads");
        drow_combobox($dialog, "slp", "sleepmasks: ", @("default-sleepmask", "indirectsyscalls-sleepmask", "retaddrspoofing-sleepmask", "draugr-sleepmask"));
        dbutton_action($dialog, "Update");

        dialog_show($dialog);                                                                                               }
}

# ===========================================================================
#                               Sleep Mask
# ===========================================================================
print_info("Sleepmask-VS Loaded");
menubar("Sleepmask", "sleep_mask_menu");
set BEACON_SLEEP_MASK {
   local('$arch $file_name $handle $data $data_len $path $sm_bof $sm_bof_len');
   $arch = $2;   

   $file_name = $global_sleep_mask . "." . $arch . ".o";

   # Check the payload architecture.
   if($arch eq "x64") {
       $path = getFileProper(script_resource("x64"), "Release", $file_name);
   } 
   else if ($arch eq "x86") {
       $path = getFileProper(script_resource("Release"), $file_name);
   }
   else {
       warn("Error: Unsupported architecture: $arch");
       return $null;
   }
   
   $handle = openf($path);
   $data   = readb($handle, -1);
   closef($handle);
   $data_len = strlen($data);
   print_info("Sleepmask - $path length: $data_len bytes");

   if ($data_len <= 0) {
      show_error("WARNING: Sleepmask - Error loading the sleep mask object file - reverting to using the default sleep mask.");
      print_info("Sleepmask - Error loading the sleep mask object file - Reverting to using the default sleep mask.");
      return $null;
   }

   # Extract the bof using sleep_mask as the entry point
   $sm_bof = bof_extract($data, "sleep_mask");
   $sm_bof_len = strlen($sm_bof);

   if ($sm_bof_len <= 0) {
      println("Sleepmask - Error extracting the sleep mask bof - Reverting to using the default sleep mask.");
      return $null;
   }

   return $sm_bof;
}

# ===========================================================================
#                               Unit test BOF
# ===========================================================================
alias run_beacongate_tests {
    local('$barch $handle $data $bof');

    # Figure out arch of current session
    $barch = barch($1);

    # Read in the unit test BOF
    $file_name = "unit-test-bof" . "." . $barch . ".o";
    if($barch eq "x64") {
       $path = getFileProper(script_resource("x64"), "Release", $file_name);
    }
    else if ($barch eq "x86") {
       $path = getFileProper(script_resource("Release"), $file_name);
    }
    else {
       warn("Error: Unsupported architecture: $barch");
       return $null;
    }
    $handle = openf($path);
    $data = readb($handle, -1);
    closef($handle);

    btask($1, "Running BeaconGate unit test BOF");
    beacon_inline_execute($1, $data, "go", $null, $null);
}

beacon_command_register(
    "run_beacongate_tests",
    "Executes a unit test BOF to test a custom call gate implementation in the sleepmask.",
    "Executes a unit test BOF to test a custom call gate implementation in the sleepmask.");
